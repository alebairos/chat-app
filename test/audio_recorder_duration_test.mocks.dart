// Mocks generated by Mockito 5.4.4 from annotations
// in character_ai_clone/test/audio_recorder_duration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i7;

import 'package:audioplayers/audioplayers.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:record/src/record.dart' as _i5;
import 'package:record_platform_interface/record_platform_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAmplitude_0 extends _i1.SmartFake implements _i2.Amplitude {
  _FakeAmplitude_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioCache_1 extends _i1.SmartFake implements _i3.AudioCache {
  _FakeAudioCache_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompleter_2<T> extends _i1.SmartFake implements _i4.Completer<T> {
  _FakeCompleter_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Record].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecord extends _i1.Mock implements _i5.Record {
  MockRecord() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> start({
    String? path,
    _i2.AudioEncoder? encoder = _i2.AudioEncoder.aacLc,
    int? bitRate = 128000,
    int? samplingRate = 44100,
    int? numChannels = 2,
    _i2.InputDevice? device,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
          {
            #path: path,
            #encoder: encoder,
            #bitRate: bitRate,
            #samplingRate: samplingRate,
            #numChannels: numChannels,
            #device: device,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isRecording() => (super.noSuchMethod(
        Invocation.method(
          #isRecording,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isPaused() => (super.noSuchMethod(
        Invocation.method(
          #isPaused,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.InputDevice>> listInputDevices() => (super.noSuchMethod(
        Invocation.method(
          #listInputDevices,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.InputDevice>>.value(<_i2.InputDevice>[]),
      ) as _i4.Future<List<_i2.InputDevice>>);

  @override
  _i4.Future<_i2.Amplitude> getAmplitude() => (super.noSuchMethod(
        Invocation.method(
          #getAmplitude,
          [],
        ),
        returnValue: _i4.Future<_i2.Amplitude>.value(_FakeAmplitude_0(
          this,
          Invocation.method(
            #getAmplitude,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Amplitude>);

  @override
  _i4.Future<bool> isEncoderSupported(_i2.AudioEncoder? encoder) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEncoderSupported,
          [encoder],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i2.RecordState> onStateChanged() => (super.noSuchMethod(
        Invocation.method(
          #onStateChanged,
          [],
        ),
        returnValue: _i4.Stream<_i2.RecordState>.empty(),
      ) as _i4.Stream<_i2.RecordState>);

  @override
  _i4.Stream<_i2.Amplitude> onAmplitudeChanged(Duration? interval) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAmplitudeChanged,
          [interval],
        ),
        returnValue: _i4.Stream<_i2.Amplitude>.empty(),
      ) as _i4.Stream<_i2.Amplitude>);
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i3.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AudioCache get audioCache => (super.noSuchMethod(
        Invocation.getter(#audioCache),
        returnValue: _FakeAudioCache_1(
          this,
          Invocation.getter(#audioCache),
        ),
      ) as _i3.AudioCache);

  @override
  set audioCache(_i3.AudioCache? _audioCache) => super.noSuchMethod(
        Invocation.setter(
          #audioCache,
          _audioCache,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get playerId => (super.noSuchMethod(
        Invocation.getter(#playerId),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#playerId),
        ),
      ) as String);

  @override
  _i4.Completer<void> get creatingCompleter => (super.noSuchMethod(
        Invocation.getter(#creatingCompleter),
        returnValue: _FakeCompleter_2<void>(
          this,
          Invocation.getter(#creatingCompleter),
        ),
      ) as _i4.Completer<void>);

  @override
  double get volume => (super.noSuchMethod(
        Invocation.getter(#volume),
        returnValue: 0.0,
      ) as double);

  @override
  double get balance => (super.noSuchMethod(
        Invocation.getter(#balance),
        returnValue: 0.0,
      ) as double);

  @override
  double get playbackRate => (super.noSuchMethod(
        Invocation.getter(#playbackRate),
        returnValue: 0.0,
      ) as double);

  @override
  _i3.PlayerMode get mode => (super.noSuchMethod(
        Invocation.getter(#mode),
        returnValue: _i3.PlayerMode.mediaPlayer,
      ) as _i3.PlayerMode);

  @override
  _i3.ReleaseMode get releaseMode => (super.noSuchMethod(
        Invocation.getter(#releaseMode),
        returnValue: _i3.ReleaseMode.release,
      ) as _i3.ReleaseMode);

  @override
  _i3.PlayerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.PlayerState.stopped,
      ) as _i3.PlayerState);

  @override
  set state(_i3.PlayerState? state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          state,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i3.AudioEvent> get eventStream => (super.noSuchMethod(
        Invocation.getter(#eventStream),
        returnValue: _i4.Stream<_i3.AudioEvent>.empty(),
      ) as _i4.Stream<_i3.AudioEvent>);

  @override
  _i4.Stream<_i3.PlayerState> get onPlayerStateChanged => (super.noSuchMethod(
        Invocation.getter(#onPlayerStateChanged),
        returnValue: _i4.Stream<_i3.PlayerState>.empty(),
      ) as _i4.Stream<_i3.PlayerState>);

  @override
  _i4.Stream<Duration> get onPositionChanged => (super.noSuchMethod(
        Invocation.getter(#onPositionChanged),
        returnValue: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<Duration> get onDurationChanged => (super.noSuchMethod(
        Invocation.getter(#onDurationChanged),
        returnValue: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<void> get onPlayerComplete => (super.noSuchMethod(
        Invocation.getter(#onPlayerComplete),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  _i4.Stream<void> get onSeekComplete => (super.noSuchMethod(
        Invocation.getter(#onSeekComplete),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  _i4.Stream<String> get onLog => (super.noSuchMethod(
        Invocation.getter(#onLog),
        returnValue: _i4.Stream<String>.empty(),
      ) as _i4.Stream<String>);

  @override
  _i4.Future<void> play(
    _i3.Source? source, {
    double? volume,
    double? balance,
    _i3.AudioContext? ctx,
    Duration? position,
    _i3.PlayerMode? mode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #play,
          [source],
          {
            #volume: volume,
            #balance: balance,
            #ctx: ctx,
            #position: position,
            #mode: mode,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAudioContext(_i3.AudioContext? ctx) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAudioContext,
          [ctx],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPlayerMode(_i3.PlayerMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setPlayerMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> release() => (super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seek(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seek,
          [position],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setBalance(double? balance) => (super.noSuchMethod(
        Invocation.method(
          #setBalance,
          [balance],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setReleaseMode(_i3.ReleaseMode? releaseMode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReleaseMode,
          [releaseMode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPlaybackRate(double? playbackRate) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackRate,
          [playbackRate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSource(_i3.Source? source) => (super.noSuchMethod(
        Invocation.method(
          #setSource,
          [source],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #setSourceUrl,
          [url],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceDeviceFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #setSourceDeviceFile,
          [path],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceAsset(String? path) => (super.noSuchMethod(
        Invocation.method(
          #setSourceAsset,
          [path],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceBytes(_i7.Uint8List? bytes) => (super.noSuchMethod(
        Invocation.method(
          #setSourceBytes,
          [bytes],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Duration?> getDuration() => (super.noSuchMethod(
        Invocation.method(
          #getDuration,
          [],
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
