// Mocks generated by Mockito 5.4.4 from annotations
// in character_ai_clone/test/chat_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i6;

import 'package:character_ai_clone/models/chat_message_model.dart' as _i7;
import 'package:character_ai_clone/models/message_type.dart' as _i5;
import 'package:character_ai_clone/services/chat_storage_service.dart' as _i4;
import 'package:character_ai_clone/services/claude_service.dart' as _i8;
import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIsarCollection_2<OBJ> extends _i1.SmartFake
    implements _i2.IsarCollection<OBJ> {
  _FakeIsarCollection_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionSchema_3<OBJ> extends _i1.SmartFake
    implements _i2.CollectionSchema<OBJ> {
  _FakeCollectionSchema_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryBuilder_4<OBJ, R, S> extends _i1.SmartFake
    implements _i2.QueryBuilder<OBJ, R, S> {
  _FakeQueryBuilder_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_5<T> extends _i1.SmartFake implements _i2.Query<T> {
  _FakeQuery_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatStorageService extends _i1.Mock
    implements _i4.ChatStorageService {
  MockChatStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Isar> get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _i3.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.getter(#db),
        )),
      ) as _i3.Future<_i2.Isar>);

  @override
  set db(_i3.Future<_i2.Isar>? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i2.Isar> openDB() => (super.noSuchMethod(
        Invocation.method(
          #openDB,
          [],
        ),
        returnValue: _i3.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.method(
            #openDB,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Isar>);

  @override
  _i3.Future<void> saveMessage({
    required String? text,
    required bool? isUser,
    required _i5.MessageType? type,
    _i6.Uint8List? mediaData,
    String? mediaPath,
    Duration? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMessage,
          [],
          {
            #text: text,
            #isUser: isUser,
            #type: type,
            #mediaData: mediaData,
            #mediaPath: mediaPath,
            #duration: duration,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i7.ChatMessageModel>> getMessages({
    int? limit,
    DateTime? before,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
          {
            #limit: limit,
            #before: before,
          },
        ),
        returnValue: _i3.Future<List<_i7.ChatMessageModel>>.value(
            <_i7.ChatMessageModel>[]),
      ) as _i3.Future<List<_i7.ChatMessageModel>>);

  @override
  _i3.Future<void> deleteMessage(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> editMessage(
    int? id,
    String? newText,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editMessage,
          [
            id,
            newText,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAllMessages() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllMessages,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i7.ChatMessageModel>> searchMessages(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMessages,
          [query],
        ),
        returnValue: _i3.Future<List<_i7.ChatMessageModel>>.value(
            <_i7.ChatMessageModel>[]),
      ) as _i3.Future<List<_i7.ChatMessageModel>>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ClaudeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockClaudeService extends _i1.Mock implements _i8.ClaudeService {
  MockClaudeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> sendMessage(String? message) => (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i3.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #sendMessage,
            [message],
          ),
        )),
      ) as _i3.Future<String>);
}

/// A class which mocks [Isar].
///
/// See the documentation for Mockito's code generation for more information.
class GeneratedMockIsar extends _i1.Mock implements _i2.Isar {
  GeneratedMockIsar() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  void requireOpen() => super.noSuchMethod(
        Invocation.method(
          #requireOpen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T> txn<T>(_i3.Future<T> Function()? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #txn,
          [callback],
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #txn,
                  [callback],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #txn,
                [callback],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> writeTxn<T>(
    _i3.Future<T> Function()? callback, {
    bool? silent = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeTxn,
          [callback],
          {#silent: silent},
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #writeTxn,
                  [callback],
                  {#silent: silent},
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #writeTxn,
                [callback],
                {#silent: silent},
              ),
            ),
      ) as _i3.Future<T>);

  @override
  T txnSync<T>(T Function()? callback) => (super.noSuchMethod(
        Invocation.method(
          #txnSync,
          [callback],
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #txnSync,
            [callback],
          ),
        ),
      ) as T);

  @override
  T writeTxnSync<T>(
    T Function()? callback, {
    bool? silent = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeTxnSync,
          [callback],
          {#silent: silent},
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #writeTxnSync,
            [callback],
            {#silent: silent},
          ),
        ),
      ) as T);

  @override
  void attachCollections(Map<Type, _i2.IsarCollection<dynamic>>? collections) =>
      super.noSuchMethod(
        Invocation.method(
          #attachCollections,
          [collections],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.IsarCollection<T> collection<T>() => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [],
        ),
        returnValue: _FakeIsarCollection_2<T>(
          this,
          Invocation.method(
            #collection,
            [],
          ),
        ),
      ) as _i2.IsarCollection<T>);

  @override
  _i2.IsarCollection<dynamic>? getCollectionByNameInternal(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getCollectionByNameInternal,
        [name],
      )) as _i2.IsarCollection<dynamic>?);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void clearSync() => super.noSuchMethod(
        Invocation.method(
          #clearSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<int> getSize({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSize,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int getSizeSync({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSizeSync,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<void> copyToFile(String? targetPath) => (super.noSuchMethod(
        Invocation.method(
          #copyToFile,
          [targetPath],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> close({bool? deleteFromDisk = false}) => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#deleteFromDisk: deleteFromDisk},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> verify() => (super.noSuchMethod(
        Invocation.method(
          #verify,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [IsarCollection].
///
/// See the documentation for Mockito's code generation for more information.
class GeneratedMockChatMessageCollection extends _i1.Mock
    implements _i2.IsarCollection<_i7.ChatMessageModel> {
  GeneratedMockChatMessageCollection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Isar get isar => (super.noSuchMethod(
        Invocation.getter(#isar),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#isar),
        ),
      ) as _i2.Isar);

  @override
  _i2.CollectionSchema<_i7.ChatMessageModel> get schema => (super.noSuchMethod(
        Invocation.getter(#schema),
        returnValue: _FakeCollectionSchema_3<_i7.ChatMessageModel>(
          this,
          Invocation.getter(#schema),
        ),
      ) as _i2.CollectionSchema<_i7.ChatMessageModel>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i3.Future<_i7.ChatMessageModel?> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i3.Future<_i7.ChatMessageModel?>.value(),
      ) as _i3.Future<_i7.ChatMessageModel?>);

  @override
  _i7.ChatMessageModel? getSync(int? id) =>
      (super.noSuchMethod(Invocation.method(
        #getSync,
        [id],
      )) as _i7.ChatMessageModel?);

  @override
  _i3.Future<List<_i7.ChatMessageModel?>> getAll(List<int>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [ids],
        ),
        returnValue: _i3.Future<List<_i7.ChatMessageModel?>>.value(
            <_i7.ChatMessageModel?>[]),
      ) as _i3.Future<List<_i7.ChatMessageModel?>>);

  @override
  List<_i7.ChatMessageModel?> getAllSync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #getAllSync,
          [ids],
        ),
        returnValue: <_i7.ChatMessageModel?>[],
      ) as List<_i7.ChatMessageModel?>);

  @override
  _i3.Future<_i7.ChatMessageModel?> getByIndex(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByIndex,
          [
            indexName,
            key,
          ],
        ),
        returnValue: _i3.Future<_i7.ChatMessageModel?>.value(),
      ) as _i3.Future<_i7.ChatMessageModel?>);

  @override
  _i7.ChatMessageModel? getByIndexSync(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #getByIndexSync,
        [
          indexName,
          key,
        ],
      )) as _i7.ChatMessageModel?);

  @override
  _i3.Future<List<_i7.ChatMessageModel?>> getAllByIndex(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByIndex,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: _i3.Future<List<_i7.ChatMessageModel?>>.value(
            <_i7.ChatMessageModel?>[]),
      ) as _i3.Future<List<_i7.ChatMessageModel?>>);

  @override
  List<_i7.ChatMessageModel?> getAllByIndexSync(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByIndexSync,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: <_i7.ChatMessageModel?>[],
      ) as List<_i7.ChatMessageModel?>);

  @override
  _i3.Future<int> put(_i7.ChatMessageModel? object) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int putSync(
    _i7.ChatMessageModel? object, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putSync,
          [object],
          {#saveLinks: saveLinks},
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<List<int>> putAll(List<_i7.ChatMessageModel>? objects) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [objects],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  List<int> putAllSync(
    List<_i7.ChatMessageModel>? objects, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAllSync,
          [objects],
          {#saveLinks: saveLinks},
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i3.Future<int> putByIndex(
    String? indexName,
    _i7.ChatMessageModel? object,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putByIndex,
          [
            indexName,
            object,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int putByIndexSync(
    String? indexName,
    _i7.ChatMessageModel? object, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putByIndexSync,
          [
            indexName,
            object,
          ],
          {#saveLinks: saveLinks},
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<List<int>> putAllByIndex(
    String? indexName,
    List<_i7.ChatMessageModel>? objects,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAllByIndex,
          [
            indexName,
            objects,
          ],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  List<int> putAllByIndexSync(
    String? indexName,
    List<_i7.ChatMessageModel>? objects, {
    bool? saveLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAllByIndexSync,
          [
            indexName,
            objects,
          ],
          {#saveLinks: saveLinks},
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i3.Future<bool> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  bool deleteSync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [id],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<int> deleteAll(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [ids],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int deleteAllSync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteAllSync,
          [ids],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<bool> deleteByIndex(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteByIndex,
          [
            indexName,
            key,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  bool deleteByIndexSync(
    String? indexName,
    List<Object?>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteByIndexSync,
          [
            indexName,
            key,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<int> deleteAllByIndex(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllByIndex,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int deleteAllByIndexSync(
    String? indexName,
    List<List<Object?>>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllByIndexSync,
          [
            indexName,
            keys,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void clearSync() => super.noSuchMethod(
        Invocation.method(
          #clearSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> importJsonRaw(_i6.Uint8List? jsonBytes) =>
      (super.noSuchMethod(
        Invocation.method(
          #importJsonRaw,
          [jsonBytes],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void importJsonRawSync(_i6.Uint8List? jsonBytes) => super.noSuchMethod(
        Invocation.method(
          #importJsonRawSync,
          [jsonBytes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> importJson(List<Map<String, dynamic>>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #importJson,
          [json],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void importJsonSync(List<Map<String, dynamic>>? json) => super.noSuchMethod(
        Invocation.method(
          #importJsonSync,
          [json],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.QueryBuilder<_i7.ChatMessageModel, _i7.ChatMessageModel, _i2.QWhere>
      where({
    bool? distinct = false,
    _i2.Sort? sort = _i2.Sort.asc,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #where,
              [],
              {
                #distinct: distinct,
                #sort: sort,
              },
            ),
            returnValue: _FakeQueryBuilder_4<_i7.ChatMessageModel,
                _i7.ChatMessageModel, _i2.QWhere>(
              this,
              Invocation.method(
                #where,
                [],
                {
                  #distinct: distinct,
                  #sort: sort,
                },
              ),
            ),
          ) as _i2.QueryBuilder<_i7.ChatMessageModel, _i7.ChatMessageModel,
              _i2.QWhere>);

  @override
  _i2.QueryBuilder<_i7.ChatMessageModel,
          _i7.ChatMessageModel, _i2.QFilterCondition>
      filter() => (super.noSuchMethod(
            Invocation.method(
              #filter,
              [],
            ),
            returnValue: _FakeQueryBuilder_4<_i7.ChatMessageModel,
                _i7.ChatMessageModel, _i2.QFilterCondition>(
              this,
              Invocation.method(
                #filter,
                [],
              ),
            ),
          ) as _i2.QueryBuilder<_i7.ChatMessageModel, _i7.ChatMessageModel,
              _i2.QFilterCondition>);

  @override
  _i2.Query<R> buildQuery<R>({
    List<_i2.WhereClause>? whereClauses = const [],
    bool? whereDistinct = false,
    _i2.Sort? whereSort = _i2.Sort.asc,
    _i2.FilterOperation? filter,
    List<_i2.SortProperty>? sortBy = const [],
    List<_i2.DistinctProperty>? distinctBy = const [],
    int? offset,
    int? limit,
    String? property,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildQuery,
          [],
          {
            #whereClauses: whereClauses,
            #whereDistinct: whereDistinct,
            #whereSort: whereSort,
            #filter: filter,
            #sortBy: sortBy,
            #distinctBy: distinctBy,
            #offset: offset,
            #limit: limit,
            #property: property,
          },
        ),
        returnValue: _FakeQuery_5<R>(
          this,
          Invocation.method(
            #buildQuery,
            [],
            {
              #whereClauses: whereClauses,
              #whereDistinct: whereDistinct,
              #whereSort: whereSort,
              #filter: filter,
              #sortBy: sortBy,
              #distinctBy: distinctBy,
              #offset: offset,
              #limit: limit,
              #property: property,
            },
          ),
        ),
      ) as _i2.Query<R>);

  @override
  _i3.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int countSync() => (super.noSuchMethod(
        Invocation.method(
          #countSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<int> getSize({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSize,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int getSizeSync({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSizeSync,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Stream<void> watchLazy({bool? fireImmediately = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLazy,
          [],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);

  @override
  _i3.Stream<_i7.ChatMessageModel?> watchObject(
    int? id, {
    bool? fireImmediately = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchObject,
          [id],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: _i3.Stream<_i7.ChatMessageModel?>.empty(),
      ) as _i3.Stream<_i7.ChatMessageModel?>);

  @override
  _i3.Stream<void> watchObjectLazy(
    int? id, {
    bool? fireImmediately = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchObjectLazy,
          [id],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);

  @override
  _i3.Future<void> verify(List<_i7.ChatMessageModel>? objects) =>
      (super.noSuchMethod(
        Invocation.method(
          #verify,
          [objects],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> verifyLink(
    String? linkName,
    List<int>? sourceIds,
    List<int>? targetIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyLink,
          [
            linkName,
            sourceIds,
            targetIds,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
